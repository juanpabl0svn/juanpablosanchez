---
import { useTranslations } from "@/i18n/utils";
import ThemeToggle from "./ThemeToggle.astro";
import MailIcon from "./icons/Mail.astro";
import BriefcaseIcon from "./icons/Briefcase.astro";
import CodeIcon from "./icons/Code.astro";
import OpenSourceIcon from "./icons/OpenSource.astro";
import ProfileCheckIcon from "./icons/ProfileCheck.astro";
import LangToggle from "./LangToggle.astro";

const { lang } = Astro.params;

const t = useTranslations(lang);

const navItems = [
  {
    title: t("experience"),
    label: "experience",
    url: "#experience",
    icon: BriefcaseIcon,
  },
  {
    title: t("projects"),
    label: "projects",
    url: "#projects",
    icon: CodeIcon,
  },
  {
    title: t("open-source"),
    label: "open-source",
    url: "#open-source",
    icon: OpenSourceIcon,
  },
  {
    title: t("about-me"),
    label: "about-me",
    url: "#about-me",
    icon: ProfileCheckIcon,
  }
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-end md:justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 bg-slate-400 justify-center items-center flex-col md:flex-row py-3 md:py-0 mr-2  bg-clip-padding backdrop-filter backdrop-blur bg-opacity-10 backdrop-saturate-100 backdrop-contrast-100"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-1 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
          aria-label={link.label}
          href={link.url}
        >
          <link.icon class="size-5 block md:hidden" />
          <span class="size-5 hidden md:block w-full">{link.title}</span>
        </a>
      ))
    }
    <span class="line"></span>
    <ThemeToggle />
    <LangToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    @apply dark:bg-gray-800/50 bg-white/50;
  }

  .line{
    @apply h-[1.5px] my-2 dark:bg-white/50 w-full md:h-5 md:w-[1.5px] md:my-0 md:mx-2 bg-gray-500 rounded-md ;
  }
</style>
